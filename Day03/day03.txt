前期回顾

1.query的应用
    操作符应用:
        比较:$lt $gt $lte $gte $ne $eq $in $nin
        逻辑: $and $or $not $nor
        数组: $all $size
        其他: $exists $mod $type

2.数据处理函数:
    pretty()    limit()    skip()   sort()   count()    distinct()

3.删除操作:
    deleteOne()     deleteMany()    remove()    findOneAndDelete()
4.修改操作:
    updateOne()     updateMany()    update()
    findOneAndUpdate()  findOneAndReplace()



*******************************************************************

Day03笔记:

修改器的使用:
    db.collection.update(query,update,upsert,multi)
        1.$set : 
            修改一个域的值,或者增加一个域

         e.g. 当一个域不存在时可以增加一个域
            db.new1.update({name:'james'},{$set:{sex:'m'}})
        
        2.$unset:
            删除一个域

         e.g.删除一个文档的sex域
            db.new1.update({name:'Alex'},{$unset:{sex:''}})

        3.$rename:
            修改一个域的域名

         e.g.修改sex域名为gender
            db.new1.updateMany({},{$rename:{sex:'gender'}})

        4.$setOnInsert:
            当update插入文档时,作为补充插入内容

         e.g.插入新的文档时,gender:'w'也会作为文档的域
            db.new1.update({name:'lucy'},{$set:{age:20},$setOnInsert:{gender:'w'}},true)

        5.$inc:
            加法修改器

         e.g.所有人的age域值加1
            db.new1.updateMany({},{$inc:{age:1}})

        6.$mul:
            乘法修改器
         e.g.所有人的age域乘2
            db.new1.updateMany({},{$mul:{age:2}})

            *$inc $mul 值可以是 整数 小数,正数 负数

        7.$max:
            指定某个域的值如果小于规定值则改为规定值,大于规定值则不变
         e.g. 如果Alex小于39则改为39,大于39则不变
            db.new1.update({name:'Alex'},{$max:{age:39}})

        8.$min:
            指定某个域的值如果大于规定值则改为规定值,小于规定值则不变
         e.g. 如果Alex大于39则改为39,小于39则不变
            db.new1.update({name:'Alex'},{$max:{age:39}})
    
    数组修改器:
        1.$push:
            向数组中添加一项
         e.g. 向socre数组中增加5
            db.class3.update({name:'ming'},{$push:{score:5}})

        2.$pushall:
            向数组中增加多项
         e.g. 向数组中添加多项内容
            db.class3.update({name:'hong'},{$pushAll:{score:[5,10]}})

        3.$pull: 
            从数组中删除某一个值(如果有重复值则都删除)
         e.g. 删除score中所有的5
            db.class3.update({name:'hong'},{$pull:{score:5}})
        
        4.$pullAll:
            同时删除数组中多个值
         e.g. 
            db.class3.update({name:'hong'},{$pullAll:{score:[82,10]}})

        5.$pop:
            弹出数组一项
         e.g. 从数组中弹出一项 1表示最后一项 -1表示第一项
            db.class3.update({name:'hong'},{$pop:{score:-1}})

        6.addToSet:
            向数组中添加一项,但是不能添加数组中已有数值
         e.g. 如果score中没有20则添加,如果有则添加不上
            db.class3.update({name:'hong'},{$addToSet:{score:20}})

        7.$each:
            对多个值进行逐一操作
         e.g. 利用each同时添加 82 10到数组
            db.class3.update({name:'hong'},{$push:{score:{$each:[82,10]}}})

        8.$position:
            指定位置插入    搭配each使用
         e.g.将91插入到1号位置
            db.class3.update({name:'hong'},{$push:{score:{$each:[91],$position:1}}})

        9.$sort:
            排序 1为升序 -1为降序
         e.g.
            db.class3.update({name:'liang'},{$push:{score:{$each:[],$sort:-1}}})

时间类型:
    1.new Date()    自动生成当前时间
        e.g.
            db.class1.insert({book:'python',date:new Date()})

    2.ISODate()     自动获取时间
        e.g.
            db.class1.insert({book:'java',date:ISODate()})
    
    3.Date()    获取系统时间生成时间字符串
        e.g.
            db.class1.insert({book:'C',date:Date()})

    4.获取任意时间:
        ISODate()
        功能:
            将制定的时间转换为MongoDB的存储时间类型
        参数:
            制定的时间
            '2018-01-01 11:11:11'
            '20180101 11:11:11'
            '20180101'
        e.g.
            db.class1.insert({book:'C++',date:ISODate('20180101 11:11:11')})

    5.时间戳
        valueOf():
            将标准时间转换为时间戳
            db.class1.insert({book:'C#',date:ISODate().valueOf()})

    6.Null类型数据
        值:
            null 
        1.表示某个域的值为空
            e.g. price域的值为空
                db.class1.insert({book:'PHP',price:null})

        2.表达某个域不存在
            e.g. 不存在gender域或gender域值为null
                db.new1.find({gender:null},{_id:0})

内部文档(Object)

    文档中某个域的值还是一个文档则这个文档为内部文档
        *当使用内部文档某个域的值时,需要用外部文档域.内部文档域的方法引用.此时需要加引号注明
        e.g.    通过book.title进行查找
            db.class4.find({'book.title':'狂人日记'},{_id:0})
                通过book.title 修改 book.price
            db.class4.update({'book.title':'狂人日记'},{$set:{'book.price':46.5}})

通过数组下标直接引用数组项:
    
    *在使用数组时,可以通过数组域 . 数组下标的方式选中数组中具体某一项进行操作
    e.g. 查找数组第一项大于80的文档
        db.class3.find({'score.0':{$gt:80}},{_id:0})

练习:
    1.将haha的年龄修改为8岁,兴趣爱好为跳舞唱歌
        db.class.update({name:'haha'},{$set:{age:8,hobby:['draw','sing']}})

    2.追加xixi兴趣爱好 唱歌
        db.class.update({name:'xixi'},{$push:{hobby:'sing'}})

    3.heihei多了兴趣爱好 吹牛 打篮球
        db.class.update({name:'heihei'},{$pushAll:{hobby:['brag','basketball']}})

    4.huohuo兴趣爱好增加跑步 唱歌 但是不要和之前重复
        db.class.update({name:'huohuo'},{$addToSet:{hobby:{$each:['running','sing']}}})

    5.该班级所有同学年龄加1
        db.class.updateMany({},{$inc:{age:1}})

    6.删除xixi的sex属性
        db.class.update({name:'xixi'},{$unset:{sex:''}})

    7.删除huohuo兴趣中的第一个
        db.class.update({name:'huohuo'},{$pop:{hobby:-1}})

    8.删除haha的兴趣画画唱歌
        db.class.update({name:'haha'},{$pullAll:{hobby:['sing','draw']}})

    9.为heihei增加一个域 备注{名族:'回族',习俗:'不吃猪肉'}
        db.class.update({name:'heihei'},{$set:{comment:{'nationality':'Hui','custom':'do not eat prok'}}})

    10.heihei备注中添加一项宗教 '伊斯兰教'
        db.class.update({name:'heihei'},{$set:{'comment.religion':'Yslam'}})


索引
    什么是索引?
        索引是建立文档所在位置的查找清单,使用索引可以方便进行快速查找,减少遍历次数,提高查找效率
    索引约束:
        1.索引本身也占有数据库空间,所以当数据量很小的时候这种消耗是没有必要的
        2.索引表需要根据数据的修改及时修改,否则索引就会不和内容配套,也就失去了意义.因此如果数据库操作是频繁的修改操作
          而不是查找操作则不适合创建索引

    创建索引:

        db.collection.creatrIndex()
        功能:
            创建索引
        参数:
            索引域 和 索引选项
        e.g.
            为name域创建索引
            db.new1.createIndex({name:1})

        * _id域会由系统自动穿件索引
        * 1表示正向索引,-1表示逆向索引

    查看集合中的索引:
        db.collection.getIndexes()

    自定义索引名:
        e.g. 
            通过索引选项name定义索引名称
            db.new1.createIndex({age:1},{name:'ageIndex'})

    其他创建索引方法:
        ensureIndex()
            功能:
                创建索引
            参数:   
                同createIndex()
            e.g.
                创建方法和createIndex用法一致
                db.class1.ensureIndex({book:1})

        createIndexes()
            功能:
                同时创建多个索引
            参数:
                数组中存入创建索引键值对
            e.g.
                db.class1.createIndexes([{name:1},{socre:-1}])

    删除索引:
        db.collection.dropIndex()
            功能:
                删除一个索引
            参数:
                索引名称或者索引键值对
            e.g.
                db.new1.dropIndex('name_1')

            e.g. 通过键值对删除索引
                db.new1.dropIndex({name:1})

        db.collection.dropIndexes()
            功能:
                删除集合中所有索引(不会删除_id索引)
            e.g.
                db.new1.dropIndexes()

    索引类型:

        符合索引:
            根据多个域创建一个索引

            e.g.
                根据name  age创建复合索引
                db.new1.createIndex({name:1, age:-1})

                自文档和数组索引: 如果对某个域创建索引,该域的值为数组或者子文档,
                            则对数组中某一项或者子文档中某个域的查找也是索引查找
                
            e.g. 对book创建索引后,该查找也是索引查找
                db.class2.find({'book.title':'围城'})

        唯一索引:
            要求创建索引的域不能有重复的值
            e.g.
                db.new1.createIndex({name:1},{unique:true})

        稀疏索引:
            会在创建索引时忽略没有制定域的文档
            e.g. 对gender域创建稀疏索引
                db.new1.createIndex({gender:1},{sparse:true})

        
    聚合操作:
        对文档进行数据整理和统计

        db.collection.aggregate()
            功能:
                完成聚合操作
            参数:
                聚合条件 需要配合聚合操作符使用
            聚合操作符

            $group  
                分组聚合    往往需要配合一定的统计操作符完成
            
                $sum    
                    统计求和
                e.g.    按照gender域的值分组,统计结果叫num,方法为加和
                    db.new1.aggregate({$group:{_id:'$gender',num:{$sum:1}}})

                $avg
                    统计平均数
                e.g. 按照性别分组,求平均年龄
                    db.new1.aggregate({$group:{_id:'$gender',num:{$avg:'$age'}}})

                $max 
                    求最大值
                e.g. 按性别分组求最大年龄   
                    db.new1.aggregate({$group:{_id:'$gender',num:{$max:'$age'}}})

                $min
                    求最小值

                $first
                    求第一个值

                $last
                    求最后一个值

                $project:
                    用于格式化的显示文档内容
                        *值得用法同find中files参数
                e.g. 按照指定名称显示文档内容
                    db.new1.aggregate({$project:{_id:0,Name:'$name',Age:'$age'}})

                $match:
                    筛选数据
                        *match值的写法同 find 中的query参数
                    e.g. 筛选年龄大于19岁的文档


作业:
    修改操作符熟练使用
    索引操作和聚合操作使用

                
























        
        
























